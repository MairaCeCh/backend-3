2025-03-24 17:25:35 [[31merror[39m]: Mongo DB Conectado
2025-03-24 17:32:16 [[31merror[39m]: El usuario ya existe con ese email
2025-03-24 17:33:37 [[31merror[39m]: {"statusCode":403,"files":["Error: El usuario ya existe con ese email","    at AuthService.registerUser (file:///C:/Users/Mayra/Documents/programar/backend-3/src/modules/auth/auth.service.js:9:24)","    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","    at async registerUser (file:///C:/Users/Mayra/Documents/programar/backend-3/src/modules/auth/auth.controller.js:7:23)"],"message":"El usuario ya existe con ese email","path":"/api/auth/register","method":"POST"}
2025-03-24 17:38:52 [[31merror[39m]: {"statusCode":403,"files":["Error: El usuario ya existe con ese email","    at AuthService.registerUser (file:///C:/Users/Mayra/Documents/programar/backend-3/src/modules/auth/auth.service.js:9:24)","    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","    at async registerUser (file:///C:/Users/Mayra/Documents/programar/backend-3/src/modules/auth/auth.controller.js:7:23)"],"message":"El usuario ya existe con ese email","path":"/api/auth/register","method":"POST"}
2025-03-24 17:39:36 [[31merror[39m]: {"statusCode":403,"files":["Error: El usuario ya existe con ese email","    at AuthService.registerUser (file:///C:/Users/Mayra/Documents/programar/backend-3/src/modules/auth/auth.service.js:9:24)","    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","    at async registerUser (file:///C:/Users/Mayra/Documents/programar/backend-3/src/modules/auth/auth.controller.js:7:23)"],"message":"El usuario ya existe con ese email","path":"/api/auth/register","method":"POST"}
2025-03-24 17:39:36 [[31merror[39m]: status:403 [POST] /api/auth/register - msg:El usuario ya existe con ese email
2025-03-24 19:05:49 [[31merror[39m]: status:500 [POST] /api/auth/login - msg:secretOrPrivateKey must have a value
2025-03-24 19:06:35 [[31merror[39m]: status:500 [POST] /api/auth/login - msg:secretOrPrivateKey must have a value
2025-03-24 19:06:42 [[31merror[39m]: status:500 [POST] /api/auth/login - msg:secretOrPrivateKey must have a value
2025-03-24 19:08:08 [[31merror[39m]: status:500 [POST] /api/auth/login - msg:secretOrPrivateKey must have a value
2025-03-24 19:08:29 [[31merror[39m]: status:500 [POST] /api/auth/login - msg:secretOrPrivateKey must have a value
2025-03-24 19:15:55 [[31merror[39m]: status:500 [POST] /api/auth/login - msg:secretOrPrivateKey must have a value
2025-03-28 18:58:58 [[31merror[39m]: status:500 [GET] /api/pets/67d73ab493884833cefa5c3 - msg:Cast to ObjectId failed for value "67d73ab493884833cefa5c3" (type string) at path "_id" for model "pets"
2025-03-28 19:01:59 [[31merror[39m]: status:500 [GET] /api/pets/67d73ab493884833cefa5c3 - msg:Cast to ObjectId failed for value "67d73ab493884833cefa5c3" (type string) at path "_id" for model "pets"
2025-03-28 19:02:20 [[31merror[39m]: status:500 [GET] /api/pets/67d73ab493884833cefa5c3 - msg:Cast to ObjectId failed for value "67d73ab493884833cefa5c3" (type string) at path "_id" for model "pets"
2025-03-28 19:05:03 [[31merror[39m]: status:500 [GET] /api/pets/67d73ab493884833cefa5c3 - msg:Cast to ObjectId failed for value "67d73ab493884833cefa5c3" (type string) at path "_id" for model "pets"
2025-03-28 19:10:02 [[31merror[39m]: status:500 [GET] /api/pets/67d73ab493884833cefa5c3 - msg:Cast to ObjectId failed for value "67d73ab493884833cefa5c3" (type string) at path "_id" for model "pets"
2025-03-28 19:20:22 [[31merror[39m]: status:500 [GET] /api/pets/67d73ab49a38848337cefa5c3 - msg:Cast to ObjectId failed for value "67d73ab49a38848337cefa5c3" (type string) at path "_id" for model "pets"
